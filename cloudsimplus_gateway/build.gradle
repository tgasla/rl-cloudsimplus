/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
  id 'java'
  id 'application'
  id 'idea'
  id 'com.github.johnrengelman.shadow' version '7.0+'
  id 'com.bmuschko.docker-java-application' version '9.3.2'
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    mavenLocal()
    jcenter()
}

sourceCompatibility = 1.17
targetCompatibility = 1.17
def dockerImageTag = 'gateway:1.9.1'

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'org.cloudsimplus:cloudsim-plus:5.0.4'
    implementation group: 'net.sf.py4j', name: 'py4j', version: '0.10.7'
    implementation group: "ch.qos.logback", name: "logback-classic", version: "1.2.3"
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    implementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.github.stefanbirkner:system-lambda:1.2.0'
}

def os = System.getProperty('os.name').toLowerCase()
def totalMemorySizeInGigabytes

if (os.contains('linux')) {
    def totalMemorySizeInBytes = "cat /proc/meminfo | grep MemTotal".execute().text.split(":")[1].trim().split()[0].toLong() * 1024
    totalMemorySizeInGigabytes = Math.round(totalMemorySizeInBytes / (1024 * 1024 * 1024))
} else if (os.contains('mac')) {
    def totalMemorySizeInBytes = "sysctl -n hw.memsize".execute().text.trim().toLong()
    totalMemorySizeInGigabytes = Math.round(totalMemorySizeInBytes / (1024 * 1024 * 1024))
} else {
    throw new IllegalStateException("Unsupported operating system: $os")
}

docker {
    url = 'unix:///var/run/docker.sock'
    javaApplication {
        baseImage = 'amazoncorretto:17-alpine-jdk'
        ports = [25333]
        images = [dockerImageTag]
        jvmArgs = ["-Xms${totalMemorySizeInGigabytes}G", "-Xmx${totalMemorySizeInGigabytes}G"]
    }
}

dockerCreateDockerfile {
    environmentVariable 'JAVA_OPTS', '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/external'
}

mainClassName = "daislab.csg.Main"
