/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/userguide.html
 */

// Apply the java plugin to add support for Java
plugins {
  id 'java'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '8.1.1'
  id 'com.bmuschko.docker-java-application' version '9.4.0'
}

//https://stackoverflow.com/questions/29593500/how-can-i-set-the-compileoptions-for-my-gradle-java-plugin
tasks.withType(JavaCompile) {
    configure(options) {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
    }
}

task configureLogging {
    doLast {
        def logLevel = System.getProperty('log.level', 'INFO')
        def logbackFile = file('src/main/resources/logback.xml')
        if (!logbackFile.exists()) {
            logger.warn "Logback configuration file not found."
            return
        }
        def logbackConfig = logbackFile.text
        logbackConfig = logbackConfig.replaceAll('<root level="\\w+">', "<root level=\"$logLevel\">")
        logbackFile.write(logbackConfig)
        logger.lifecycle "Logging level set to $logLevel"
    }
}

test {
    useJUnitPlatform()
    //https://stackoverflow.com/questions/70756414/java-lang-reflect-inaccessibleobjectexception-unable-to-make-field-private-fina
    //https://stackoverflow.com/questions/70412805/what-does-this-error-mean-java-lang-reflect-inaccessibleobjectexception-unable
    //https://openjdk.org/jeps/396
    jvmArgs = jvmArgs + ['--add-opens=java.base/java.util=ALL-UNNAMED']
}

// In this section you declare where to find the dependencies of your project
repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    mavenLocal()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.cloudsimplus:cloudsimplus:8.5.1'
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'net.sf.py4j:py4j:0.10.9.7'
    implementation 'ch.qos.logback:logback-classic:1.5.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.postgresql:postgresql:42.7.1'
    implementation 'org.hamcrest:hamcrest:2.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.10.2'
    testImplementation 'com.github.stefanbirkner:system-lambda:1.2.1'
}

def dockerImageTag = 'gateway:1.9.1'
def os = System.getProperty('os.name').toLowerCase()
def totalMemorySizeInGigabytes

if (os.contains('linux')) {
    def totalMemorySizeInBytes = "cat /proc/meminfo | grep MemTotal".execute().text.split(":")[1].trim().split()[0].toLong() * 1024
    totalMemorySizeInGigabytes = Math.round(totalMemorySizeInBytes / (1024 * 1024 * 1024))
} else if (os.contains('mac')) {
    def totalMemorySizeInBytes = "sysctl -n hw.memsize".execute().text.trim().toLong()
    totalMemorySizeInGigabytes = Math.round(totalMemorySizeInBytes / (1024 * 1024 * 1024))
} else {
    throw new IllegalStateException("Unsupported operating system: $os")
}

application {
    mainClass.set('daislab.csg.Main')
}

docker {
    url = 'unix:///var/run/docker.sock'
    javaApplication {
        baseImage = 'amazoncorretto:21-alpine-jdk'
        ports = [25333]
        images = [dockerImageTag]
        jvmArgs = ["-Xms${totalMemorySizeInGigabytes}G", "-Xmx${totalMemorySizeInGigabytes}G"]
    }
}

dockerCreateDockerfile {
    environmentVariable 'JAVA_OPTS', '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/external'
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

build.dependsOn configureLogging