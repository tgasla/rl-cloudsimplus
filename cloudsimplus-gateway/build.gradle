/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/current/userguide/userguide.html
 */

// Apply the java plugin to add support for Java
plugins {
  id 'java'
  id 'application'
  id 'com.bmuschko.docker-java-application' version '9.4.0'
}

//https://stackoverflow.com/questions/29593500/how-can-i-set-the-compileoptions-for-my-gradle-java-plugin
tasks.withType(JavaCompile) {
    configure(options) {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked' << '-Xdiags:verbose'
    }
}

task configureLogging {
    doLast {
        def logLevel = System.getProperty('log.level')?.trim().toUpperCase() ?: 'INFO'
        def logDestination = System.getProperty('log.destination')?.trim()?.toLowerCase() ?: 'none'

        def logbackFile = file('src/main/resources/logback.xml')
        if (!logbackFile.exists()) {
            logger.warn 'Logback configuration file not found.'
            return
        }

        // Read the logback.xml content
        def logbackConfig = logbackFile.text

        // Update the log level
        logbackConfig = logbackConfig.replaceAll('<root level="\\w*">', "<root level=\"$logLevel\">")

        // Remove everything between <root level="INFO"> and </root>
        logbackConfig = logbackConfig.replaceAll(/<root level="\w*">[\s\S]*<\/root>/, "<root level=\"$logLevel\">\n</root>")

        def newAppenderRefs = ""
        if (logDestination == "stdout") {
            newAppenderRefs = '\t<appender-ref ref="STDOUT" />\n'
        } else if (logDestination == "file") {
            newAppenderRefs = '\t<appender-ref ref="FILE" />\n'
        } else if (logDestination == "stdout-file") {
            newAppenderRefs = '\t<appender-ref ref="STDOUT" />\n\t<appender-ref ref="FILE" />\n'
        }
        // Note: If "none" is selected, we leave the <root> section empty

        // Insert the new appender-refs between <root> and </root>
        logbackConfig = logbackConfig.replaceAll("</root>", newAppenderRefs + "</root>")

        // Write the modified configuration back to the file
        logbackFile.write(logbackConfig)

        logger.lifecycle "Logging level set to $logLevel, output set to $logDestination"
    
    }
}

build.dependsOn configureLogging

test {
    useJUnitPlatform()
    // enable/disable system out messages on junit tests
    testLogging.showStandardStreams = System.getProperty('junit.output.show')?.trim()?.toBoolean() ?: false
    logger.lifecycle "showStandardStreams set to $testLogging.showStandardStreams"
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    implementation 'org.cloudsimplus:cloudsimplus:8.5.5'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'net.sf.py4j:py4j:0.10.9.7'
    implementation 'ch.qos.logback:logback-classic:1.5.12'
    implementation 'org.apache.commons:commons-collections4:4.5.0-M2'
    implementation 'com.google.code.gson:gson:2.11.0'

    testImplementation 'commons-io:commons-io:2.18.1'
    testImplementation 'org.hamcrest:hamcrest:3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.11.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.3'
}

def dockerImageTag = 'gateway:2.0.0'

application {
    mainClass.set('daislab.cspg.Main')
}

docker {
    url = 'unix:///var/run/docker.sock'
    javaApplication {
        baseImage = 'amazoncorretto:21-alpine'
        images = [dockerImageTag]
        ports = []
        // jvmArgs = ["-Xms1G", "-Xmx4G"]
    }
}

// You can add environment variables either here or in the docker-compose.yml
// dockerCreateDockerfile {
//     environmentVariable 'JAVA_OPTS',
//         '-XX:+UnlockExperimentalVMOptions ' +
//         '-XX:+UseCGroupMemoryLimitForHeap ' +
//         '-XX:+HeapDumpOnOutOfMemoryError ' +
//         '-XX:HeapDumpPath=/external'
// }

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}
